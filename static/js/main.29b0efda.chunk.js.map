{"version":3,"sources":["components/Avengercards/index.js","components/Wrapper/index.js","components/Title/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Avengercards","props","react_default","a","createElement","className","alt","name","src","image","onClick","chosenImage","id","Wrapper","children","Title","Navbar","maxScore","avengers","length","App","state","Score","Highscore","chosenImages","_this","includes","resetGame","setState","HighScore","selected","push","shuffleImages","shuffledImages","shuffleArray","i","j","Math","floor","random","_ref","_this2","this","components_Wrapper","components_Title","components_Navbar","map","avenger","components_Avengercards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+7CAgBeA,MAbf,SAAsBC,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MACjCC,QAAS,kBAAKT,EAAMU,YAAYV,EAAMW,gBCD/BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,iBCavBE,MAdf,SAAgBf,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,uCADF,6ECAFa,EAAWC,EAASC,OA4FXC,6MAxFbC,MAAQ,CACNH,WACAI,MAAO,EACPC,UAAW,EACXC,aAAc,MAIfb,YAAc,SAAAC,GAEb,GAAIa,EAAKJ,MAAMG,aAAaE,SAASd,GAEnCa,EAAKE,gBAGF,CAEP,IAAML,EAAQG,EAAKJ,MAAMC,MAAQ,EAG3BA,EAAQG,EAAKJ,MAAME,WACrBE,EAAKG,SAAS,CAACC,UAAUP,IAEvBA,IAAUL,EAEZQ,EAAKE,aAKLF,EAAKG,SAAS,CAACE,SAASL,EAAKJ,MAAMG,aAAaO,KAAKnB,KACrDa,EAAKG,SAAS,CAACN,MAAMA,IACrBG,EAAKO,qBAMXL,UAAY,WACVF,EAAKG,SAAS,CAACN,MAAM,IACrBG,EAAKG,SAAS,CAACJ,aAAa,KAC5BC,EAAKO,mBAGPA,cAAgB,WACd,IAAMC,EAAiBR,EAAKS,aAAahB,GACzCO,EAAKG,SAAS,CAACV,SAASe,OAI1BC,aAAe,SAAC/B,GACd,IAAK,IAAIgC,EAAIhC,EAAEgB,OAAS,EAAGgB,EAAI,EAAGA,IAAK,CACnC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADPK,EAEpB,CAACrC,EAAEiC,GAAIjC,EAAEgC,IAAvBhC,EAAEgC,GAFgCK,EAAA,GAE5BrC,EAAEiC,GAF0BI,EAAA,GAIvC,OAAOrC,2EAOE,IAAAsC,EAAAC,KACP,OAEExC,EAAAC,EAAAC,cAACuC,EAAD,KAEEzC,EAAAC,EAAAC,cAACwC,EAAD,6BACC1C,EAAAC,EAAAC,cAACyC,EAAD,gBACWH,KAAKrB,MAAMC,MADtB,eAEeoB,KAAKrB,MAAMQ,WAE1Ba,KAAKrB,MAAMH,SAAS4B,IAAI,SAAAC,GAAO,OAC9B7C,EAAAC,EAAAC,cAAC4C,EAAD,CAEEpC,GAAImC,EAAQnC,GACZqC,IAAKF,EAAQnC,GACbH,MAAOsC,EAAQtC,MACfE,YAAa8B,EAAK9B,wBAhFZuC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.29b0efda.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Avengercards(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} \n        onClick={() =>props.chosenImage(props.id)}></img>\n      </div>\n      \n     \n    </div>\n  );\n}\n\nexport default Avengercards;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n      <div className=\"navbar\">\n        <div className=\"start\">{props.children}</div>\n        <div className=\"scores\">\n          <strong>Click image to start!</strong> If you can selected all images without repeating, then you win!\n          \n           \n        \n        </div>\n      </div>\n    );\n  }\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport Avengercards from \"./components/Avengercards\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Navbar from \"./components/Navbar\";\nimport avengers from \"./avengers.json\";\n\nconst maxScore = avengers.length\n\nclass App extends Component {\n  // array\n  state = {\n    avengers,\n    Score: 0,\n    Highscore: 0,\n    chosenImages: [],\n  };\n\n  // clicking images\n   chosenImage = id => {\n    \n    if (this.state.chosenImages.includes(id)) {\n      \n      this.resetGame()\n    }\n \n    else {\n   \n  const Score = this.state.Score + 1\n\n    // highScore \n    if (Score > this.state.Highscore) {\n      this.setState({HighScore:Score})\n    }\n    if (Score === maxScore) {\n      \n      this.resetGame()\n    }\n    //  image id and shuffle\n    else {\n     \n      this.setState({selected:this.state.chosenImages.push(id)})\n      this.setState({Score:Score})\n      this.shuffleImages()\n    };\n  }\n}\n\n// Re start game\nresetGame = () => {\n  this.setState({Score:0})\n  this.setState({chosenImages:[]})\n  this.shuffleImages()\n}\n//  shuffle\nshuffleImages = () => {\n  const shuffledImages = this.shuffleArray(avengers)\n  this.setState({avengers:shuffledImages})\n}\n\n// https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array (use this code as reference for shuffleling an)\nshuffleArray = (a) => {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\n\n\n\n  // Map  component for each object\n  render() {\n    return (\n      \n      <Wrapper>\n        \n        <Title>Avengers Clicky game</Title>\n         <Navbar> \n           Score = {this.state.Score} \n           HighScore = {this.state.HighScore}\n         </Navbar>\n        {this.state.avengers.map(avenger => (\n          <Avengercards\n           // handleClick={this.handleClick}\n            id={avenger.id}\n            key={avenger.id}\n            image={avenger.image}\n            chosenImage={this.chosenImage}\n          />\n        ))}\n       \n      </Wrapper>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}